const unicode = @import("unicode.zig");
const encoding = @import("encoding.zig");
const std = @import("std");

const Codepoint = unicode.Codepoint;
const Encoding = encoding.Encoding;
const DecodeResult = encoding.DecodeResult;

/// ASCII encoding algorithm
pub const AscIiEncoding = struct {
    const Self = @This();
    const EncodingType = Encoding(EncodeError, DecodeError);

    /// Encode errors
    pub const EncodeError = error{
        /// Codepoint value not defined by the encoding method
        UnmappedCodepoint,

        /// Not enough space to encode the codepoint
        InsufficientSpace,
    };

    /// Decode errors
    pub const DecodeError = error{
        /// Invalid byte value
        InvalidByte,

        /// Attempt to decode an empty slice
        DecodeEmptySlice,
    };

    encoding: EncodingType,

    /// Initializes the encoding
    pub fn init() Self {
        return .{
            .encoding = .{
                .encodeSingleFn = encodeAsc,
                .decodeSingleFn = decodeAsc,
            },
        };
    }

    /// Encodes an ASCII codepoint
    pub fn encodeAsc(enc: *EncodingType, codepoint: Codepoint, bytes: []u8) EncodeError!u3 {
        if (bytes.len == 0) return error.InsufficientSpace;
        if (codepoint > 127) return error.UnmappedCodepoint;

        bytes[0] = @truncate(u8, codepoint);
        return 1;
    }

    /// Decodes an ASCII value
    pub fn decodeAsc(enc: *EncodingType, bytes: []const u8) DecodeError!DecodeResult {
        if (bytes.len == 0) return error.DecodeEmptySlice;
        if (bytes[0] > 127) return error.InvalidByte;

        return DecodeResult{ .codepoint = bytes[0], .length = 1 };
    }
};

/// Generic type for single byte table encodings
///
/// > **Remarks**: The `table` is the codepoint table of the encoding, `indexes` is the
/// > indexes of the codepoints in the `table`. **Both** of them **must** be ordered
/// > ascending according to the codepoint value. If less than 128 codepoints are coded,
/// > you must fill up with `0`s.
pub fn SingleByteEncoding(comptime table: [128]Codepoint, comptime indexes: [128]u7) type {
    return struct {
        const Self = @This();
        const EncodingType = Encoding(EncodeError, DecodeError);

        /// Encode Errors
        pub const EncodeError = error{
            /// Codepoint value not defined by the encoding method
            UnmappedCodepoint,

            /// Not enough space to encode the codepoint
            InsufficientSpace,
        };

        pub const DecodeError = error{
            /// Invalid byte value
            InvalidByte,

            /// Attempt to decode an empty slice
            EmptySlice,
        };

        encoding: EncodingType,

        /// Initializes the encoding
        pub fn init() Self {
            return .{
                .encoding = .{
                    .encodeSingleFn = encodeSingle,
                    .decodeSingleFn = decodeSingle,
                },
            };
        }

        /// Encodes a single codepoint
        pub fn encodeSingle(enc: *EncodingType, codepoint: Codepoint, bytes: []u8) EncodeError!u3 {
            if (bytes.len == 0) return error.InsufficientSpace;

            if (codepoint < 128) { // ascii
                bytes[0] = @truncate(u8, codepoint);
                return 1;
            }

            const idx_opt = codepointIndex(codepoint);
            if (idx_opt) |idx| {
                bytes[0] = @as(u8, indexes[idx]) + 128;
            } else {
                return error.UnmappedCodepoint;
            }

            return 1;
        }

        /// Decodes a single byte
        pub fn decodeSingle(enc: *EncodingType, bytes: []const u8) DecodeError!DecodeResult {
            const self = @fieldParentPtr(Self, "encoding", enc);

            if (bytes.len == 0) return error.EmptySlice;
            if (bytes[0] < 128) return DecodeResult{ .codepoint = bytes[0], .length = 1 }; // ascii

            const index: usize = indexes[bytes[0] - 128];
            if (table[index] != 0) return DecodeResult{ .codepoint = table[index], .length = 1 };

            return error.InvalidByte;
        }

        /// Searches for the codepoint
        fn codepointIndex(codepoint: Codepoint) ?usize {
            const cmp = struct {
                // function that compares two codepoints
                pub fn compare(cp1: Codepoint, cp2: Codepoint) std.math.Order {
                    if (cp1 == cp2) return .eq;
                    if (cp1 < cp2) return .lt;

                    return .gt;
                }
            };

            return std.sort.binarySearch(Codepoint, codepoint, table[0..], cmp.compare);
        }
    };
}

/// Ibm866 Encoding. Synonyms: `866`, `cp866`, `csibm866`, `ibm866`
pub const Ibm866 = SingleByteEncoding(
    [128]Codepoint{ 0x00A0, 0x00A4, 0x00B0, 0x00B7, 0x0401, 0x0404, 0x0407, 0x040E, 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 0x0451, 0x0454, 0x0457, 0x045E, 0x2116, 0x2219, 0x221A, 0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524, 0x252C, 0x2534, 0x253C, 0x2550, 0x2551, 0x2552, 0x2553, 0x2554, 0x2555, 0x2556, 0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x255C, 0x255D, 0x255E, 0x255F, 0x2560, 0x2561, 0x2562, 0x2563, 0x2564, 0x2565, 0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x256B, 0x256C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590, 0x2591, 0x2592, 0x2593, 0x25A0 },
    [128]u7{ 127, 125, 120, 122, 112, 114, 116, 118, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 119, 124, 121, 123, 68, 51, 90, 63, 64, 89, 67, 52, 66, 65, 69, 77, 58, 85, 86, 73, 56, 55, 59, 84, 83, 72, 62, 61, 60, 70, 71, 76, 53, 54, 57, 81, 82, 75, 79, 80, 74, 88, 87, 78, 95, 92, 91, 93, 94, 48, 49, 50, 126 },
);

/// ISO-8859-2 Encoding. Synonyms: `csisolatin2`, `iso-8859-2`, `iso-ir-101`, `iso8859-2`, `iso88592`, `iso_8859-2`, `iso_8859-2:1987`, `l2`, `latin2`
pub const Iso8859_2 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A4, 0x00A7, 0x00A8, 0x00AD, 0x00B0, 0x00B4, 0x00B8, 0x00C1, 0x00C2, 0x00C4, 0x00C7, 0x00C9, 0x00CB, 0x00CD, 0x00CE, 0x00D3, 0x00D4, 0x00D6, 0x00D7, 0x00DA, 0x00DC, 0x00DD, 0x00DF, 0x00E1, 0x00E2, 0x00E4, 0x00E7, 0x00E9, 0x00EB, 0x00ED, 0x00EE, 0x00F3, 0x00F4, 0x00F6, 0x00F7, 0x00FA, 0x00FC, 0x00FD, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107, 0x010C, 0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0118, 0x0119, 0x011A, 0x011B, 0x0139, 0x013A, 0x013D, 0x013E, 0x0141, 0x0142, 0x0143, 0x0144, 0x0147, 0x0148, 0x0150, 0x0151, 0x0154, 0x0155, 0x0158, 0x0159, 0x015A, 0x015B, 0x015E, 0x015F, 0x0160, 0x0161, 0x0162, 0x0163, 0x0164, 0x0165, 0x016E, 0x016F, 0x0170, 0x0171, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D, 0x017E, 0x02C7, 0x02D8, 0x02D9, 0x02DB, 0x02DD },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 39, 40, 45, 48, 52, 56, 65, 66, 68, 71, 73, 75, 77, 78, 83, 84, 86, 87, 90, 92, 93, 95, 97, 98, 100, 103, 105, 107, 109, 110, 115, 116, 118, 119, 122, 124, 125, 67, 99, 33, 49, 70, 102, 72, 104, 79, 111, 80, 112, 74, 106, 76, 108, 69, 101, 37, 53, 35, 51, 81, 113, 82, 114, 85, 117, 64, 96, 88, 120, 38, 54, 42, 58, 41, 57, 94, 126, 43, 59, 89, 121, 91, 123, 44, 60, 47, 63, 46, 62, 55, 34, 127, 50, 61 },
);

/// ISO-8859-3 Encoding. Synonyms: `csisolatin3`, `iso-8859-3`, `iso-ir-109`, `iso8859-3`, `iso88593`, `iso_8859-3`, `iso_8859-3:1988`, `l3`, `latin3`
pub const Iso8859_3 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A3, 0x00A4, 0x00A7, 0x00A8, 0x00AD, 0x00B0, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B7, 0x00B8, 0x00BD, 0x00C0, 0x00C1, 0x00C2, 0x00C4, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D6, 0x00D7, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E4, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F6, 0x00F7, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0108, 0x0109, 0x010A, 0x010B, 0x011C, 0x011D, 0x011E, 0x011F, 0x0120, 0x0121, 0x0124, 0x0125, 0x0126, 0x0127, 0x0130, 0x0131, 0x0134, 0x0135, 0x015C, 0x015D, 0x015E, 0x015F, 0x016C, 0x016D, 0x017B, 0x017C, 0x02D8, 0x02D9 },
    [128]u7{ 37, 46, 62, 67, 80, 99, 112, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 45, 48, 50, 51, 52, 53, 55, 56, 61, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 70, 102, 69, 101, 88, 120, 43, 59, 85, 117, 38, 54, 33, 49, 41, 57, 44, 60, 94, 126, 42, 58, 93, 125, 47, 63, 34, 127 },
);

/// ISO-8859-4 Encoding. Synonyms: `csisolatin4`, `iso-8859-4`, `iso-ir-110`, `iso8859-4`, `iso88594`, `iso_8859-4`, `iso_8859-4:1988`, `l4`, `latin4`
const Iso8859_4 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A4, 0x00A7, 0x00A8, 0x00AD, 0x00AF, 0x00B0, 0x00B4, 0x00B8, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C9, 0x00CB, 0x00CD, 0x00CE, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00DA, 0x00DB, 0x00DC, 0x00DF, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E9, 0x00EB, 0x00ED, 0x00EE, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00FA, 0x00FB, 0x00FC, 0x0100, 0x0101, 0x0104, 0x0105, 0x010C, 0x010D, 0x0110, 0x0111, 0x0112, 0x0113, 0x0116, 0x0117, 0x0118, 0x0119, 0x0122, 0x0123, 0x0128, 0x0129, 0x012A, 0x012B, 0x012E, 0x012F, 0x0136, 0x0137, 0x0138, 0x013B, 0x013C, 0x0145, 0x0146, 0x014A, 0x014B, 0x014C, 0x014D, 0x0156, 0x0157, 0x0160, 0x0161, 0x0166, 0x0167, 0x0168, 0x0169, 0x016A, 0x016B, 0x0172, 0x0173, 0x017D, 0x017E, 0x02C7, 0x02D9, 0x02DB },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 39, 40, 45, 47, 48, 52, 56, 65, 66, 67, 68, 69, 70, 73, 75, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 105, 107, 109, 110, 116, 117, 118, 119, 120, 122, 123, 124, 64, 96, 33, 49, 72, 104, 80, 112, 42, 58, 76, 108, 74, 106, 43, 59, 37, 53, 79, 111, 71, 103, 83, 115, 34, 38, 54, 81, 113, 61, 63, 82, 114, 35, 51, 41, 57, 44, 60, 93, 125, 94, 126, 89, 121, 46, 62, 55, 127, 50 },
);

/// ISO-8859-5 Encoding. Synonyms: `csisolatincyrillic`, `cyrillic`, `iso-8859-5`, `iso-ir-144`, `iso8859-5`, `iso88595`, `iso_8859-5`, `iso_8859-5:1988`
const Iso8859_5 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A4, 0x00A7, 0x00A8, 0x00AD, 0x00AF, 0x00B0, 0x00B4, 0x00B8, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C9, 0x00CB, 0x00CD, 0x00CE, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00DA, 0x00DB, 0x00DC, 0x00DF, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E9, 0x00EB, 0x00ED, 0x00EE, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00FA, 0x00FB, 0x00FC, 0x0100, 0x0101, 0x0104, 0x0105, 0x010C, 0x010D, 0x0110, 0x0111, 0x0112, 0x0113, 0x0116, 0x0117, 0x0118, 0x0119, 0x0122, 0x0123, 0x0128, 0x0129, 0x012A, 0x012B, 0x012E, 0x012F, 0x0136, 0x0137, 0x0138, 0x013B, 0x013C, 0x0145, 0x0146, 0x014A, 0x014B, 0x014C, 0x014D, 0x0156, 0x0157, 0x0160, 0x0161, 0x0166, 0x0167, 0x0168, 0x0169, 0x016A, 0x016B, 0x0172, 0x0173, 0x017D, 0x017E, 0x02C7, 0x02D9, 0x02DB },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 39, 40, 45, 47, 48, 52, 56, 65, 66, 67, 68, 69, 70, 73, 75, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 105, 107, 109, 110, 116, 117, 118, 119, 120, 122, 123, 124, 64, 96, 33, 49, 72, 104, 80, 112, 42, 58, 76, 108, 74, 106, 43, 59, 37, 53, 79, 111, 71, 103, 83, 115, 34, 38, 54, 81, 113, 61, 63, 82, 114, 35, 51, 41, 57, 44, 60, 93, 125, 94, 126, 89, 121, 46, 62, 55, 127, 50 },
);

/// ISO-8859-6 Encoding. Synonyms: `arabic`, `asmo-708`, `csiso88596e`, `csiso88596i`, `csisolatinarabic`, `ecma-114`, `iso-8859-6`, `iso-8859-6-e`, `iso-8859-6-i`, `iso-ir-127`, `iso8859-6`, `iso88596`, `iso_8859-6`, `iso_8859-6:1987`
const Iso8859_6 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A4, 0x00AD, 0x060C, 0x061B, 0x061F, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 0x0650, 0x0651, 0x0652 },
    [128]u7{ 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 91, 92, 93, 94, 95, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 45, 44, 59, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114 },
);

/// ISO-8859-7 Encoding. Synonyms: `csisolatingreek`, `ecma-118`, `elot_928`, `greek`, `greek8`, `iso-8859-7`, `iso-ir-126`, `iso8859-7`, `iso88597`, `iso_8859-7`, `iso_8859-7:1987`, `sun_eu_greek`
const Iso8859_7 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0000, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A3, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B7, 0x00BB, 0x00BD, 0x037A, 0x0384, 0x0385, 0x0386, 0x0388, 0x0389, 0x038A, 0x038C, 0x038E, 0x038F, 0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 0x03A0, 0x03A1, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF, 0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x2015, 0x2018, 0x2019, 0x20AC, 0x20AF },
    [128]u7{ 46, 82, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 38, 39, 40, 41, 43, 44, 45, 48, 49, 50, 51, 55, 59, 61, 42, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 47, 33, 34, 36, 37 },
);

/// ISO-8859-8 Encoding. Synonyms: `csiso88598e`, `csisolatinhebrew`, `hebrew`, `iso-8859-8`, `iso-8859-8-e`, `iso-ir-138`, `iso8859-8`, `iso88598`, `iso_8859-8`, `iso_8859-8:1988`, `visual`, `csiso88598i`, `iso-8859-8-i`, `logical`
const Iso8859_8 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00D7, 0x00F7, 0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x200E, 0x200F, 0x2017 },
    [128]u7{ 33, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 123, 124, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 42, 58, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 95 },
);

/// ISO-8859-10 Encoding. Synonyms: `csisolatin6`, `iso-8859-10`, `iso-ir-157`, `iso8859-10`, `iso885910`, `l6`, `latin6`
const Iso8859_10 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A7, 0x00AD, 0x00B0, 0x00B7, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C9, 0x00CB, 0x00CD, 0x00CE, 0x00CF, 0x00D0, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D8, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E9, 0x00EB, 0x00ED, 0x00EE, 0x00EF, 0x00F0, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F8, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x0100, 0x0101, 0x0104, 0x0105, 0x010C, 0x010D, 0x0110, 0x0111, 0x0112, 0x0113, 0x0116, 0x0117, 0x0118, 0x0119, 0x0122, 0x0123, 0x0128, 0x0129, 0x012A, 0x012B, 0x012E, 0x012F, 0x0136, 0x0137, 0x0138, 0x013B, 0x013C, 0x0145, 0x0146, 0x014A, 0x014B, 0x014C, 0x014D, 0x0160, 0x0161, 0x0166, 0x0167, 0x0168, 0x0169, 0x016A, 0x016B, 0x0172, 0x0173, 0x017D, 0x017E, 0x2015 },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 45, 48, 55, 65, 66, 67, 68, 69, 70, 73, 75, 77, 78, 79, 80, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 107, 109, 110, 111, 112, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 64, 96, 33, 49, 72, 104, 41, 57, 34, 50, 76, 108, 74, 106, 35, 51, 37, 53, 36, 52, 71, 103, 38, 54, 127, 40, 56, 81, 113, 47, 63, 82, 114, 42, 58, 43, 59, 87, 119, 46, 62, 89, 121, 44, 60, 61 },
);

/// ISO-8859-13 Encoding. Synonyms: `iso-8859-13`, `iso8859-13`, `iso885913`
const Iso8859_13 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A2, 0x00A3, 0x00A4, 0x00A6, 0x00A7, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B5, 0x00B6, 0x00B7, 0x00B9, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00C4, 0x00C5, 0x00C6, 0x00C9, 0x00D3, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00DC, 0x00DF, 0x00E4, 0x00E5, 0x00E6, 0x00E9, 0x00F3, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00FC, 0x0100, 0x0101, 0x0104, 0x0105, 0x0106, 0x0107, 0x010C, 0x010D, 0x0112, 0x0113, 0x0116, 0x0117, 0x0118, 0x0119, 0x0122, 0x0123, 0x012A, 0x012B, 0x012E, 0x012F, 0x0136, 0x0137, 0x013B, 0x013C, 0x0141, 0x0142, 0x0143, 0x0144, 0x0145, 0x0146, 0x014C, 0x014D, 0x0156, 0x0157, 0x015A, 0x015B, 0x0160, 0x0161, 0x016A, 0x016B, 0x0172, 0x0173, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D, 0x017E, 0x2019, 0x201C, 0x201D, 0x201E },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 41, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 68, 69, 47, 73, 83, 85, 86, 87, 40, 92, 95, 100, 101, 63, 105, 115, 117, 118, 119, 56, 124, 66, 98, 64, 96, 67, 99, 72, 104, 71, 103, 75, 107, 70, 102, 76, 108, 78, 110, 65, 97, 77, 109, 79, 111, 89, 121, 81, 113, 82, 114, 84, 116, 42, 58, 90, 122, 80, 112, 91, 123, 88, 120, 74, 106, 93, 125, 94, 126, 127, 52, 33, 37 },
);

/// ISO-8859-14 Encoding. Synonyms: `iso-8859-14`, `iso8859-14`, `iso885914`
const Iso8859_14 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A3, 0x00A7, 0x00A9, 0x00AD, 0x00AE, 0x00B6, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FF, 0x010A, 0x010B, 0x0120, 0x0121, 0x0174, 0x0175, 0x0176, 0x0177, 0x0178, 0x1E02, 0x1E03, 0x1E0A, 0x1E0B, 0x1E1E, 0x1E1F, 0x1E40, 0x1E41, 0x1E56, 0x1E57, 0x1E60, 0x1E61, 0x1E6A, 0x1E6B, 0x1E80, 0x1E81, 0x1E82, 0x1E83, 0x1E84, 0x1E85, 0x1EF2, 0x1EF3 },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 39, 41, 45, 46, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 36, 37, 50, 51, 80, 112, 94, 126, 47, 33, 34, 38, 43, 48, 49, 52, 53, 55, 57, 59, 63, 87, 119, 40, 56, 42, 58, 61, 62, 44, 60 },
);

/// ISO-8859-15 Encoding. Synonyms: `csisolatin9`, `iso-8859-15`, `iso8859-15`, `iso885915`, `iso_8859-15`, `l9`
const Iso8859_15 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A5, 0x00A7, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B5, 0x00B6, 0x00B7, 0x00B9, 0x00BA, 0x00BB, 0x00BF, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF, 0x0152, 0x0153, 0x0160, 0x0161, 0x0178, 0x017D, 0x017E, 0x20AC },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 60, 61, 38, 40, 62, 52, 56, 36 },
);

/// ISO-8859-16 Encoding. Synonyms: `iso-8859-16`
const Iso8859_16 = SingleByteEncoding(
    [128]Codepoint{ 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A7, 0x00A9, 0x00AB, 0x00AD, 0x00B0, 0x00B1, 0x00B6, 0x00B7, 0x00BB, 0x00C0, 0x00C1, 0x00C2, 0x00C4, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D2, 0x00D3, 0x00D4, 0x00D6, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E4, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F2, 0x00F3, 0x00F4, 0x00F6, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FF, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107, 0x010C, 0x010D, 0x0110, 0x0111, 0x0118, 0x0119, 0x0141, 0x0142, 0x0143, 0x0144, 0x0150, 0x0151, 0x0152, 0x0153, 0x015A, 0x015B, 0x0160, 0x0161, 0x0170, 0x0171, 0x0178, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D, 0x017E, 0x0218, 0x0219, 0x021A, 0x021B, 0x201D, 0x201E, 0x20AC },
    [128]u7{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 43, 45, 48, 49, 54, 55, 59, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 86, 89, 90, 91, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 121, 122, 123, 124, 127, 67, 99, 33, 34, 69, 101, 50, 57, 80, 112, 93, 125, 35, 51, 81, 113, 85, 117, 60, 61, 87, 119, 38, 40, 88, 120, 62, 44, 46, 47, 63, 52, 56, 42, 58, 94, 126, 53, 37, 36 },
);

/// KOI8-R Encoding. Synonyms: `cskoi8r`, `koi`, `koi8`, `koi8-r`, `koi8_r`
const Koi8R = SingleByteEncoding(
    [128]Codepoint{ 0x00A0, 0x00A9, 0x00B0, 0x00B2, 0x00B7, 0x00F7, 0x0401, 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 0x0451, 0x2219, 0x221A, 0x2248, 0x2264, 0x2265, 0x2320, 0x2321, 0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524, 0x252C, 0x2534, 0x253C, 0x2550, 0x2551, 0x2552, 0x2553, 0x2554, 0x2555, 0x2556, 0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x255C, 0x255D, 0x255E, 0x255F, 0x2560, 0x2561, 0x2562, 0x2563, 0x2564, 0x2565, 0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x256B, 0x256C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590, 0x2591, 0x2592, 0x2593, 0x25A0 },
    [128]u7{ 26, 63, 28, 29, 30, 31, 51, 97, 98, 119, 103, 100, 101, 118, 122, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 102, 104, 99, 126, 123, 125, 127, 121, 120, 124, 96, 113, 65, 66, 87, 71, 68, 69, 86, 90, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 70, 72, 67, 94, 91, 93, 95, 89, 88, 92, 64, 81, 35, 21, 22, 23, 24, 25, 19, 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 11, 12, 13, 14, 15, 16, 17, 18, 20 },
);

/// KOI8-U Encoding. Synonyms: `koi8-ru`, `koi8-u`
const Koi8U = SingleByteEncoding(
    [128]Codepoint{ 0x00A0, 0x00A9, 0x00B0, 0x00B2, 0x00B7, 0x00F7, 0x0401, 0x0404, 0x0406, 0x0407, 0x040E, 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 0x0451, 0x0454, 0x0456, 0x0457, 0x045E, 0x0490, 0x0491, 0x2219, 0x221A, 0x2248, 0x2264, 0x2265, 0x2320, 0x2321, 0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524, 0x252C, 0x2534, 0x253C, 0x2550, 0x2551, 0x2552, 0x2554, 0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x255E, 0x255F, 0x2560, 0x2561, 0x2563, 0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590, 0x2591, 0x2592, 0x2593, 0x25A0 },
    [128]u7{ 26, 63, 28, 29, 30, 31, 51, 52, 54, 55, 62, 97, 98, 119, 103, 100, 101, 118, 122, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 102, 104, 99, 126, 123, 125, 127, 121, 120, 124, 96, 113, 65, 66, 87, 71, 68, 69, 86, 90, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 70, 72, 67, 94, 91, 93, 95, 89, 88, 92, 64, 81, 35, 36, 38, 39, 46, 61, 45, 21, 22, 23, 24, 25, 19, 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 33, 34, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 53, 56, 57, 58, 59, 60, 11, 12, 13, 14, 15, 16, 17, 18, 20 },
);

/// macintosh Encoding. Synonyms: `csmacintosh`, `mac`, `macintosh`, `x-mac-roman`
const Macintosh = SingleByteEncoding(
    [128]Codepoint{ 0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A5, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00BA, 0x00BB, 0x00BF, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FF, 0x0131, 0x0152, 0x0153, 0x0178, 0x0192, 0x02C6, 0x02C7, 0x02D8, 0x02D9, 0x02DA, 0x02DB, 0x02DC, 0x02DD, 0x03A9, 0x03C0, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x2044, 0x20AC, 0x2122, 0x2202, 0x2206, 0x220F, 0x2211, 0x221A, 0x221E, 0x222B, 0x2248, 0x2260, 0x2264, 0x2265, 0x25CA, 0xF8FF, 0xFB01, 0xFB02 },
    [128]u7{ 74, 65, 34, 35, 52, 36, 44, 41, 59, 71, 66, 40, 120, 33, 49, 43, 53, 38, 97, 124, 60, 72, 64, 75, 103, 101, 76, 0, 1, 46, 2, 105, 3, 102, 104, 109, 106, 107, 108, 4, 113, 110, 111, 77, 5, 47, 116, 114, 115, 6, 39, 8, 7, 9, 11, 10, 12, 62, 13, 15, 14, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 27, 26, 86, 63, 29, 28, 30, 31, 88, 117, 78, 79, 89, 68, 118, 127, 121, 122, 123, 126, 119, 125, 61, 57, 80, 81, 84, 85, 98, 82, 83, 99, 32, 96, 37, 73, 100, 92, 93, 90, 91, 42, 54, 70, 56, 55, 67, 48, 58, 69, 45, 50, 51, 87, 112, 94, 95 },
);

/// windows-874 Encoding. Synonyms: `dos-874`, `iso-8859-11`, `iso8859-11`, `iso885911`, `tis-620`, `windows-874`
const Windows874 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0081, 0x0082, 0x0083, 0x0084, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07, 0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F, 0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17, 0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F, 0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27, 0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F, 0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37, 0x0E38, 0x0E39, 0x0E3A, 0x0E3F, 0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47, 0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F, 0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57, 0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0x2013, 0x2014, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2026, 0x20AC },
    [128]u7{ 91, 92, 93, 94, 124, 125, 126, 127, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 22, 23, 17, 18, 19, 20, 21, 5, 0 },
);

/// windows-1250 Encoding. Synonyms: `cp1250`, `windows-1250`, `x-cp1250`
const Windows1250 = SingleByteEncoding(
    [128]Codepoint{ 0x0081, 0x0083, 0x0088, 0x0090, 0x0098, 0x00A0, 0x00A4, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00B0, 0x00B1, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00BB, 0x00C1, 0x00C2, 0x00C4, 0x00C7, 0x00C9, 0x00CB, 0x00CD, 0x00CE, 0x00D3, 0x00D4, 0x00D6, 0x00D7, 0x00DA, 0x00DC, 0x00DD, 0x00DF, 0x00E1, 0x00E2, 0x00E4, 0x00E7, 0x00E9, 0x00EB, 0x00ED, 0x00EE, 0x00F3, 0x00F4, 0x00F6, 0x00F7, 0x00FA, 0x00FC, 0x00FD, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107, 0x010C, 0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0118, 0x0119, 0x011A, 0x011B, 0x0139, 0x013A, 0x013D, 0x013E, 0x0141, 0x0142, 0x0143, 0x0144, 0x0147, 0x0148, 0x0150, 0x0151, 0x0154, 0x0155, 0x0158, 0x0159, 0x015A, 0x015B, 0x015E, 0x015F, 0x0160, 0x0161, 0x0162, 0x0163, 0x0164, 0x0165, 0x016E, 0x016F, 0x0170, 0x0171, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D, 0x017E, 0x02C7, 0x02D8, 0x02D9, 0x02DB, 0x02DD, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AC, 0x2122 },
    [128]u7{ 1, 3, 8, 16, 24, 32, 36, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 59, 65, 66, 68, 71, 73, 75, 77, 78, 83, 84, 86, 87, 90, 92, 93, 95, 97, 98, 100, 103, 105, 107, 109, 110, 115, 116, 118, 119, 122, 124, 125, 67, 99, 37, 57, 70, 102, 72, 104, 79, 111, 80, 112, 74, 106, 76, 108, 69, 101, 60, 62, 35, 51, 81, 113, 82, 114, 85, 117, 64, 96, 88, 120, 12, 28, 42, 58, 10, 26, 94, 126, 13, 29, 89, 121, 91, 123, 15, 31, 47, 63, 14, 30, 33, 34, 127, 50, 61, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 0, 25 },
);

/// windows-1251 Encoding. Synonyms: `cp1251`, `windows-1251`, `x-cp1251`
const Windows1251 = SingleByteEncoding(
    [128]Codepoint{ 0x0098, 0x00A0, 0x00A4, 0x00A6, 0x00A7, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00B0, 0x00B1, 0x00B5, 0x00B6, 0x00B7, 0x00BB, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x040E, 0x040F, 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457, 0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x045E, 0x045F, 0x0490, 0x0491, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AC, 0x2116, 0x2122 },
    [128]u7{ 24, 32, 36, 38, 39, 41, 43, 44, 45, 46, 48, 49, 53, 54, 55, 59, 40, 0, 1, 42, 61, 50, 47, 35, 10, 12, 14, 13, 33, 15, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 56, 16, 3, 58, 62, 51, 63, 60, 26, 28, 30, 29, 34, 31, 37, 52, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 8, 57, 25 },
);

/// windows-1252 Encoding. Synonyms: `ansi_x3.4-1968`, `ascii`, `cp1252`, `cp819`, `csisolatin1`, `ibm819`, `iso-8859-1`, `iso-ir-100`, `iso8859-1`, `iso88591`, `iso_8859-1`, `iso_8859-1:1987`, `l1`, `latin1`, `us-ascii`, `windows-1252`, `x-cp1252`
const Windows1252 = SingleByteEncoding(
    [128]Codepoint{ 0x0081, 0x008D, 0x008F, 0x0090, 0x009D, 0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF, 0x0152, 0x0153, 0x0160, 0x0161, 0x0178, 0x017D, 0x017E, 0x0192, 0x02C6, 0x02DC, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AC, 0x2122 },
    [128]u7{ 1, 13, 15, 16, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 12, 28, 10, 26, 31, 14, 30, 3, 8, 24, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 0, 25 },
);

/// windows-1253 Encoding. Synonyms: `cp1253`, `windows-1253`, `x-cp1253`
const Windows1253 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0000, 0x0081, 0x0088, 0x008A, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0098, 0x009A, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B5, 0x00B6, 0x00B7, 0x00BB, 0x00BD, 0x0192, 0x0384, 0x0385, 0x0386, 0x0388, 0x0389, 0x038A, 0x038C, 0x038E, 0x038F, 0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 0x03A0, 0x03A1, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF, 0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x2013, 0x2014, 0x2015, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AC, 0x2122 },
    [128]u7{ 42, 82, 127, 1, 8, 10, 12, 13, 14, 15, 16, 24, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 59, 61, 3, 52, 33, 34, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 22, 23, 47, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 0, 25 },
);

/// windows-1254 Encoding. Synonyms: `cp1254`, `csisolatin5`, `iso-8859-9`, `iso-ir-148`, `iso8859-9`, `iso88599`, `iso_8859-9`, `iso_8859-9:1989`, `l5`, `latin5`, `windows-1254`, `x-cp1254`
const Windows1254 = SingleByteEncoding(
    [128]Codepoint{ 0x0081, 0x008D, 0x008E, 0x008F, 0x0090, 0x009D, 0x009E, 0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FF, 0x011E, 0x011F, 0x0130, 0x0131, 0x0152, 0x0153, 0x015E, 0x015F, 0x0160, 0x0161, 0x0178, 0x0192, 0x02C6, 0x02DC, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AC, 0x2122 },
    [128]u7{ 1, 13, 14, 15, 16, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 80, 112, 93, 125, 12, 28, 94, 126, 10, 26, 31, 3, 8, 24, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 0, 25 },
);

/// windows-1255 Encoding. Synonyms: `cp1255`, `windows-1255`, `x-cp1255`
const Windows1255 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0081, 0x008A, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x009A, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 0x00D7, 0x00F7, 0x0192, 0x02C6, 0x02DC, 0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7, 0x05B8, 0x05B9, 0x05BA, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF, 0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x05F0, 0x05F1, 0x05F2, 0x05F3, 0x05F4, 0x200E, 0x200F, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AA, 0x20AC, 0x2122 },
    [128]u7{ 89, 90, 91, 92, 93, 94, 95, 123, 124, 127, 1, 10, 12, 13, 14, 15, 16, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 42, 58, 3, 8, 24, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 84, 85, 86, 87, 88, 125, 126, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 36, 0, 25 },
);

/// windows-1256 Encoding. Synonyms: `cp1256`, `windows-1256`, `x-cp1256`
const Windows1256 = SingleByteEncoding(
    [128]Codepoint{ 0x00A0, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00D7, 0x00E0, 0x00E2, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EE, 0x00EF, 0x00F4, 0x00F7, 0x00F9, 0x00FB, 0x00FC, 0x0152, 0x0153, 0x0192, 0x02C6, 0x060C, 0x061B, 0x061F, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 0x0650, 0x0651, 0x0652, 0x0679, 0x067E, 0x0686, 0x0688, 0x0691, 0x0698, 0x06A9, 0x06AF, 0x06BA, 0x06BE, 0x06C1, 0x06D2, 0x200C, 0x200D, 0x200E, 0x200F, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AC, 0x2122 },
    [128]u7{ 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 87, 96, 98, 103, 104, 105, 106, 107, 110, 111, 116, 119, 121, 123, 124, 12, 28, 3, 8, 33, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 108, 109, 112, 113, 114, 115, 117, 118, 120, 122, 10, 1, 13, 15, 26, 14, 24, 16, 31, 42, 64, 127, 29, 30, 125, 126, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 0, 25 },
);

/// windows-1257 Encoding. Synonyms: `cp1257`, `windows-1257`, `x-cp1257`
const Windows1257 = SingleByteEncoding(
    [128]Codepoint{ 0x0000, 0x0000, 0x0081, 0x0083, 0x0088, 0x008A, 0x008C, 0x0090, 0x0098, 0x009A, 0x009C, 0x009F, 0x00A0, 0x00A2, 0x00A3, 0x00A4, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00C4, 0x00C5, 0x00C6, 0x00C9, 0x00D3, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00DC, 0x00DF, 0x00E4, 0x00E5, 0x00E6, 0x00E9, 0x00F3, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00FC, 0x0100, 0x0101, 0x0104, 0x0105, 0x0106, 0x0107, 0x010C, 0x010D, 0x0112, 0x0113, 0x0116, 0x0117, 0x0118, 0x0119, 0x0122, 0x0123, 0x012A, 0x012B, 0x012E, 0x012F, 0x0136, 0x0137, 0x013B, 0x013C, 0x0141, 0x0142, 0x0143, 0x0144, 0x0145, 0x0146, 0x014C, 0x014D, 0x0156, 0x0157, 0x015A, 0x015B, 0x0160, 0x0161, 0x016A, 0x016B, 0x0172, 0x0173, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D, 0x017E, 0x02C7, 0x02D9, 0x02DB, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AC, 0x2122 },
    [128]u7{ 33, 37, 1, 3, 8, 10, 12, 16, 24, 26, 28, 31, 32, 34, 35, 36, 38, 39, 13, 41, 43, 44, 45, 46, 29, 48, 49, 50, 51, 52, 53, 54, 55, 15, 57, 59, 60, 61, 62, 68, 69, 47, 73, 83, 85, 86, 87, 40, 92, 95, 100, 101, 63, 105, 115, 117, 118, 119, 56, 124, 66, 98, 64, 96, 67, 99, 72, 104, 71, 103, 75, 107, 70, 102, 76, 108, 78, 110, 65, 97, 77, 109, 79, 111, 89, 121, 81, 113, 82, 114, 84, 116, 42, 58, 90, 122, 80, 112, 91, 123, 88, 120, 74, 106, 93, 125, 94, 126, 14, 127, 30, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 0, 25 },
);

/// windows-1258 Encoding. Synonyms: `cp1258`, `windows-1258`, `x-cp1258`
const Windows1258 = SingleByteEncoding(
    [128]Codepoint{ 0x0081, 0x008A, 0x008D, 0x008E, 0x008F, 0x0090, 0x009A, 0x009D, 0x009E, 0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 0x00C0, 0x00C1, 0x00C2, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CD, 0x00CE, 0x00CF, 0x00D1, 0x00D3, 0x00D4, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00ED, 0x00EE, 0x00EF, 0x00F1, 0x00F3, 0x00F4, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FF, 0x0102, 0x0103, 0x0110, 0x0111, 0x0152, 0x0153, 0x0178, 0x0192, 0x01A0, 0x01A1, 0x01AF, 0x01B0, 0x02C6, 0x02DC, 0x0300, 0x0301, 0x0303, 0x0309, 0x0323, 0x2013, 0x2014, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x2020, 0x2021, 0x2022, 0x2026, 0x2030, 0x2039, 0x203A, 0x20AB, 0x20AC, 0x2122 },
    [128]u7{ 1, 10, 13, 14, 15, 16, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 127, 67, 99, 80, 112, 12, 28, 31, 3, 85, 117, 93, 125, 8, 24, 76, 108, 94, 82, 114, 22, 23, 17, 18, 2, 19, 20, 4, 6, 7, 21, 5, 9, 11, 27, 126, 0, 25 },
);

/// x-mac-cyrillic Encoding. Synonyms: `x-mac-cyrillic`, `x-mac-ukrainian`
const X_MacCyrillic = SingleByteEncoding(
    [128]Codepoint{ 0x00A0, 0x00A3, 0x00A7, 0x00A9, 0x00AB, 0x00AC, 0x00AE, 0x00B0, 0x00B1, 0x00B5, 0x00B6, 0x00BB, 0x00F7, 0x0192, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x040E, 0x040F, 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457, 0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x045E, 0x045F, 0x0490, 0x0491, 0x2013, 0x2014, 0x2018, 0x2019, 0x201C, 0x201D, 0x201E, 0x2020, 0x2022, 0x2026, 0x20AC, 0x2116, 0x2122, 0x2206, 0x221A, 0x221E, 0x2248, 0x2260, 0x2264, 0x2265 },
    [128]u7{ 74, 35, 36, 41, 71, 66, 40, 33, 49, 53, 38, 72, 86, 68, 93, 43, 46, 56, 65, 39, 58, 55, 60, 62, 75, 77, 88, 90, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 95, 94, 44, 47, 57, 79, 52, 59, 64, 61, 63, 76, 78, 89, 91, 34, 54, 80, 81, 84, 85, 82, 83, 87, 32, 37, 73, 127, 92, 42, 70, 67, 48, 69, 45, 50, 51 },
);
